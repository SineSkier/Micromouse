char b[16][16][5] = { 0 };  //maze and flood values

void setup() {
  // begin serial communications at 9600 bits of data per second
  // for communicating with the computer, use one of these rates: 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, or 115200
  Serial.begin(9600);
}

void printFullMaze() {
  //----------//Print Full Maze//----------//
  // Prints a succinct version of the full maze
  Serial.println(" _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
  for (int i = 15; i >= 0; i--) {
    Serial.print("|");
    for (int j = 0; j < 16; j++) {
      if (b[i][j][2]) {
        Serial.print("_");
      }
      else {
        Serial.print(" ");
      }
      if (b[i][j][1]) {
        Serial.print("|");
      }
      else {
        Serial.print(" ");
      }
    }
    Serial.println();
  }
}

boolean floodFill(int row, int col) {
  //----------//Flood//----------//
  //fills all flood array spaces with -1
  for(int i = 0; i < 16; i++) {
    for(int j = 0; j < 16; j++) {
      b[i][j][4] = -1;
    }
  }
  
  //fills the four goal flood array spaces with 0 by default
  if (row < 0 || col < 0) {
    b[7][7][4] = 0;
    b[7][8][4] = 0;
    b[8][7][4] = 0;
    b[8][8][4] = 0;
  }
  else {
    b[row][col][4] = 0;
  }
  
  //fills the flood array with values using flood fill logic
  for (int k = 0; k < 256; k++) {
    for (int i = 0; i < 16; i++) {
      for (int j = 0; j < 16; j++) {
        if (b[i][j][4] == k) {  //if the flood array space equals k (starting at 0), place k+1 in adjacent flood array spaces
          if (i < 15) {
            if (!b[i + 1][j][2] && b[i + 1][j][4] == -1) {  //North
              b[i + 1][j][4] = b[i][j][4] + 1;
            }
          }
          if (i > 0) {
            if (!b[i - 1][j][0] && b[i - 1][j][4] == -1) {  //South
              b[i - 1][j][4] = b[i][j][4] + 1;
            }
          }
          if (j < 15) {
            if (!b[i][j + 1][3] && b[i][j + 1][4] == -1) {  //East
              b[i][j + 1][4] = b[i][j][4] + 1;
            }
          }
          if (j > 0) {
            if(!b[i][j - 1][1] && b[i][j - 1][4] == -1) {  //West
              b[i][j - 1][4] = b[i][j][4] + 1;
            }
          }
        }
      }
    }
  }
  
  //checks if all four corners can reach the center
  if (b[0][0][4] != -1 && b[0][15][4] != -1 && b[15][0][4] != -1 && b[15][15][4] != -1) {
    return true;
  }
  return false;
}

void matchCells() {
  //Matching//
  //makes sure each cell has the same walls as the adjacent cells
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
      if (i > 0) {
        if (b[i - 1][j][0]) {
          b[i][j][2] = 1;
        }
        else if (b[i][j][2]) {
          b[i - 1][j][0] = 1;
        }
      }
      if (i < 15) {
        if (b[i + 1][j][2]) {
          b[i][j][0] = 1;
        }
        else if (b[i][j][0]) {
          b[i + 1][j][2] = 1;
        }
      }
      if (j > 0) {
        if (b[i][j - 1][1]) {
          b[i][j][3] = 1;
        }
        else if (b[i][j][3]) {
          b[i][j - 1][1] = 1;
        }
      }
      if (j < 15) {
        if (b[i][j + 1][3]) {
          b[i][j][1] = 1;
        }
        else if (b[i][j][1]) {
          b[i][j + 1][3] = 1;
        }
      }
    }
  }
}

void generateRandomMaze() {
  int percent = 30; // percent chance of placing a wall
  //----------//Walls//----------//
  //build a random maze
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
      //randomize the bottom and left sides of each cell
      for (int k = 2; k < 4; k++) {
        b[i][j][k] = (int)(random(100) < percent);
      }
    }
  }
  
  //----------//Constants//----------//
  //After the maze is randomly generated, these constants are placed
  
  //Center Walls//
  //makes the center squares have walls on all sides
  for (int i = 7; i <= 8; i++) {
    for (int j = 7; j <= 8; j++) {
      for (int k = 0; k < 4; k++) {
        b[i][j][k] = 1;
      }
    }
  }
  
  //Center Opening//
  //places center wall opening
  switch (random(8)) {
    case 0: b[7][7][3] = 0; break;
    case 1: b[7][7][2] = 0; break;
    case 2: b[7][8][2] = 0; break;
    case 3: b[7][8][1] = 0; break;
    case 4: b[8][8][1] = 0; break;
    case 5: b[8][8][0] = 0; break;
    case 6: b[8][7][0] = 0; break;
    case 7: b[8][7][3] = 0; break;
  }
  
  //Border//
  //make the edges have walls
  for (int i = 0; i < 16; i++) {
    b[0][i][2] = 1;
    b[15][i][0] = 1;
    b[i][0][3] = 1;
    b[i][15][1] = 1;
  }
  
  //Corners//
  //places the starting positions in the four corners
  b[0][0][0] = 0;
  b[0][0][1] = 1;
  b[0][0][2] = 1;
  b[0][0][3] = 1;
  b[0][1][3] = 1;
  b[1][0][2] = 0;
  b[0][15][0] = 1;
  b[0][15][1] = 1;
  b[0][15][2] = 1;
  b[0][15][3] = 0;
  b[0][14][1] = 0;
  b[1][15][2] = 1;
  b[15][0][0] = 1;
  b[15][0][1] = 0;
  b[15][0][2] = 1;
  b[15][0][3] = 1;
  b[15][1][3] = 0;
  b[14][0][0] = 1;
  b[15][15][0] = 1;
  b[15][15][1] = 1;
  b[15][15][2] = 0;
  b[15][15][3] = 1;
  b[15][14][1] = 1;
  b[14][15][0] = 0;
  
  matchCells();
  
  //Pegs//
  //makes sure a wall is on every peg
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
      if ((i > 0) && (j > 0)) {
        if (!(b[i][j][3] + b[i][j][2] + b[i - 1][j - 1][0] + b[i - 1][j - 1][1])) {
          switch (random(4)) {
            case 0: b[i][j][3] = 1;          break;
            case 1: b[i][j][2] = 1;          break;
            case 2: b[i - 1][j - 1][0] = 1;  break;
            case 3: b[i - 1][j - 1][1] = 1;  break;
          }
        }
      }
    }
  }
  
  b[7][7][0] = 0;
  b[7][7][1] = 0;
  b[8][7][1] = 0;
  b[8][7][2] = 0;
  b[8][8][2] = 0;
  b[8][8][3] = 0;
  b[7][8][3] = 0;
  b[7][8][0] = 0;
  
  matchCells();
}

void clearWalls() {
  //Clean Slate//
  //starts the maze without having any walls anywhere
  for (int i = 0; i < 16; i++) {
    for (int j = 0; j < 16; j++) {
      for (int k = 0; k < 4; k++) {
        b[i][j][k] = 0;
      }
    }
  }
}

void randomMaze() {
  boolean goodGen = false;  //whether or not the maze is solvable
  randomSeed(millis());
  //----------//----------//MAZE GENERATION//----------//----------//
  
  while (!goodGen) {  //makes sure maze is solvable
    clearWalls();
    generateRandomMaze();
    goodGen = floodFill(-1, -1);
  }
}

int input[3] = { '\0' };

// shifts array up and puts 0 in first position by default
void arrayShift(int my_arr[], int next = 0) {
  /*for(int i = 1; i < length; i++) {
    my_arr[length - i + 1] = my_arr[length - i];
  }*/
  my_arr[2] = my_arr[1];
  my_arr[1] = my_arr[0];
  my_arr[0] = next;
}

void loop() {
  
  // send data only when you receive data:
  if (Serial.available() > 0) {
    // read the incoming byte and put in "buffer"
    arrayShift(input, Serial.read());
    
    // say what you got:
    Serial.print("I received: ");
    Serial.write(input[0]);
    Serial.print(", ");
    Serial.println(input[0], DEC);
    
    // "gen" input
    if (input[0] == 'n' && input[1] == 'e' && input[2] == 'g') {
      
      Serial.println("Generating...");
      randomMaze();
      printFullMaze();
      
    }
  }
}
